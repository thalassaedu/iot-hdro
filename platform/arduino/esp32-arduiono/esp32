#include <ArduinoJson.h>
#include <DFRobot_DHT11.h>
#include <ESPAsyncWebServer.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_TSL2591.h>

// Replace with your network credentials
const char* ssid = "WLAN-45K2FB";
const char* password = "51265629093004418224";

// DHT11 settings
#define DHT11_PIN 15 // GPIO15 for DHT11 sensor

// Soil moisture sensor settings
const int hygrometer = 32; // Hygrometer sensor analog pin output connected to GPIO 32 of ESP32
const int digitalOutput = 27; // Digital output pin for any additional functionality

// Light sensor settings
Adafruit_TSL2591 tsl = Adafruit_TSL2591(2591);

DFRobot_DHT11 dht;
AsyncWebServer server(80);

int nitrogen = 0, phosphorus = 0, potassium = 0;

void displaySensorDetails() {
  sensor_t sensor;
  tsl.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print("Sensor:       "); Serial.println(sensor.name);
  Serial.print("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" lux");
  Serial.print("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" lux");
  Serial.print("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" lux");  
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}

void configureSensor() {
  tsl.setGain(TSL2591_GAIN_MED);         // Medium gain (1x)
  tsl.setTiming(TSL2591_INTEGRATIONTIME_100MS);  // medium integration time (100ms)
}

void setup() {
  Serial.begin(9600);
  Serial1.begin(9600, SERIAL_8N1, 16, 17); // Initialize Serial1 for communication with Arduino

  Serial.println("DHT11, Soil Moisture Sensor, and Light Sensor setup...");

  pinMode(digitalOutput, OUTPUT);
  digitalWrite(digitalOutput, LOW);

  if (!tsl.begin()) {
    Serial.println("No TSL2591 detected ... check your wiring or I2C ADDR!");
    while (1);
  }
  
  displaySensorDetails();
  configureSensor();

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    dht.read(DHT11_PIN);
    
    int temperature = dht.temperature;
    int humidity = dht.humidity;

    int soilMoistureValue = analogRead(hygrometer); 
    soilMoistureValue = constrain(soilMoistureValue, 400, 4095);
    soilMoistureValue = map(soilMoistureValue, 400, 4095, 100, 0);

    sensors_event_t event;
    tsl.getEvent(&event);
    float lightValueLux = event.light;

    Serial.print("Light (lux): ");
    Serial.println(lightValueLux);

    if (temperature == -1 && humidity == -1) {
      request->send(200, "application/json", "{\"error\":\"Failed to read from DHT sensor!\"}");
    } else {
      String message;
      StaticJsonDocument<200> doc;
      doc["humidity"] = humidity;
      doc["temperature"] = temperature;
      doc["soilMoisture"] = soilMoistureValue;
      doc["light"] = lightValueLux;
      doc["nitrogen"] = nitrogen;
      doc["phosphorus"] = phosphorus;
      doc["potassium"] = potassium;
      serializeJson(doc, message);
      request->send(200, "application/json", message);
    }
  });

  server.begin();
}

void loop() {
  delay(2000);

  dht.read(DHT11_PIN);

  int temperature = dht.temperature;
  int humidity = dht.humidity;

  int soilMoistureValue = analogRead(hygrometer); 
  soilMoistureValue = constrain(soilMoistureValue, 400, 4095);
  soilMoistureValue = map(soilMoistureValue, 400, 4095, 100, 0);

  sensors_event_t event;
  tsl.getEvent(&event);
  float lightValueLux = event.light;

  if (temperature == -1 && humidity == -1) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  while (Serial1.available()) {
    String line = Serial1.readStringUntil('\n');
    if (line.startsWith("Nitrogen:")) {
      nitrogen = line.substring(9).toInt();
    } else if (line.startsWith("Phosphorus:")) {
      phosphorus = line.substring(11).toInt();
    } else if (line.startsWith("Potassium:")) {
      potassium = line.substring(10).toInt();
    }
  }

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin("http://your_api_endpoint_url/update"); // Replace with your API endpoint URL

    StaticJsonDocument<200> doc;
    doc["temperature"] = temperature;
    doc["humidity"] = humidity;
    doc["soilMoisture"] = soilMoistureValue;
    doc["light"] = lightValueLux;
    doc["nitrogen"] = nitrogen;
    doc["phosphorus"] = phosphorus;
    doc["potassium"] = potassium;

    String jsonData;
    serializeJson(doc, jsonData);

    http.addHeader("Content-Type", "application/json");
    int httpResponseCode = http.POST(jsonData);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println(httpResponseCode);
      Serial.println(response);
    } else {
      Serial.print("Error on sending POST: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  } else {
    Serial.println("Error in WiFi connection");
  }

  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print("%, ");
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print("Â°C, ");
  Serial.print("Soil Moisture: ");
  Serial.print(soilMoistureValue);
  Serial.print("%, ");
  Serial.print("Light: ");
  Serial.print(lightValueLux);
  Serial.print(" lux, ");
  Serial.print("Nitrogen: ");
  Serial.print(nitrogen);
  Serial.print(" mg/kg, ");
  Serial.print("Phosphorus: ");
  Serial.print(phosphorus);
  Serial.print(" mg/kg, ");
  Serial.print("Potassium: ");
  Serial.println(potassium);
  Serial.println(" mg/kg");

  if (soilMoistureValue < 60) {
    Serial.println("Soil is dry. Consider watering.");
    digitalWrite(digitalOutput, HIGH);
  } else if (soilMoistureValue >= 60 && soilMoistureValue <= 70) {
    Serial.println("Soil moisture is optimal for plants.");
    digitalWrite(digitalOutput, LOW);
  } else {
    Serial.println("Soil is too wet for plants. Avoid overwatering.");
    digitalWrite(digitalOutput, LOW);
  }
}
